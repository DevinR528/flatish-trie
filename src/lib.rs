//!
//! A flattened trie that uses indexes into a flat HashMap<T> where T is the single element of a
//! sequence.
//! 
//! for "cat" and "cow" 
//! {
//!     hash of ([], 'c'): Node { children: [hashes of (['c'], 'a'), (['c], 'o')]},
//!     ([], 'a'): Node { children: [hash of (['c', 'a'], 't')] },
//!     ([], 't'): Node { children: [] },
//!     ([], 'o'): Node { children: [hash of (['c', 'o'], 'w')] },
//!     ([], 'w'): Node { children: [] },
//! }
//! asking for "c" would find the index of "c" using a hash of ([], 'c')
//! [a, c, o, t, w]
//!     ^
//! which gives indexes into the children of 'c' generated by (['c'], 'o') or 
//! (['c'], 'a') respectively.
//! [a, c, o, t, w]
//!  ^     ^
//! and again for each child recursively
//! [a, c, o, t, w]
//!           ^  ^ o's 
//!          a's
//! <br>
use std::fmt::Debug;
use std::hash::Hash;
use std::collections::hash_map::Entry;

mod key;
use key::{make_key, key_from_seq, key_at_index};
mod node;
use node::{Node};
mod noop_hash;
pub use noop_hash::PreHashedMap;

#[derive(Debug, Clone)]
pub struct Trie<T> {
    starts: Vec<u64>,
    children: PreHashedMap<u64, Node<T>>,
    /// number of unique items T inserted into the trie.
    len: usize,
}
impl<T> Default for Trie<T> {
    fn default() -> Self {
        Self {
            children: PreHashedMap::default(),
            starts: Vec::default(),
            len: 0,
        }
    }
}

impl<T> Trie<T> 
where
    T: Eq + Hash + Clone + Debug,
{
    pub fn new() -> Self {
        Trie { children: PreHashedMap::default(), starts: Vec::default(), len: 0, }
    }

    pub fn is_empty(&self) -> bool {
        self.len == 0
    }

    fn _insert(&mut self, seq: &[T], val: Option<T>, mut idx: usize) {
        if let Some(val) = val {
            let key = make_key((&seq[..idx], &val));

            if self.children.contains_key(&key) {
                // add new keys to Node.children vec
                // we just checked its in here
                let node = self.children.get_mut(&key).unwrap();
                node.update_children(seq, idx);
                idx += 1;
                if let Some(next) = seq.get(idx) {
                    self._insert(seq, Some(next.clone()), idx);
                    return;
                }
                return;
            }

            let terminal = seq.len() == idx + 1;
            let node = Node::new(val, &seq, idx, terminal);
            self.children.insert(key, node);
            self.len += 1;
            // if terminal { return };
            idx += 1;
            if let Some(next) = seq.get(idx) {
                self._insert(seq, Some(next.clone()), idx)
            }
        }
    }

    pub fn insert(&mut self, seq: &[T]) {
        if let Some(first) = seq.first() {
            let key = make_key((&[], first));
            if !self.starts.contains(&key) { self.starts.push(key) };
            self._insert(seq, Some(first.clone()), 0)
        }
    }

    fn _search<'n>(
        map: &PreHashedMap<u64, Node<T>>,
        node: &'n Node<T>,
        seq_key: &[T],
        idx: usize,
        found: &mut Found<T>
    ) {        
        // complete terminal branch no children
        if node.is_terminal() && node.child_len() == 0 {
            found.branch_end();
            return;
        // terminal but children after
        } else if node.is_terminal() {
            found.branch_end_continue();
        }
        // recurs iteratively over children
        for n in node.children(map) {
            found.push_val(n.to_value());
            Trie::_search(map, n, seq_key, idx + 1, found);

            // not terminal but has more than one child, if deeper than single
            // node we need a some way of keeping track of what needs to be removed
            // from temp vec
            if !node.is_terminal() && node.child_len() > 1 {
                found.branch_split(node.as_value());
            }
        }
    }

    // Returns `true` if `seq_key` is found.
    pub fn contains(&self, seq_key: &[T]) -> bool {
        let key = key_from_seq(seq_key);
        self.children.contains_key(&key)
    }

    /// Returns all of the found sequences, walking
    /// each branch depth first.
    ///
    /// # Examples
    ///
    /// ```
    /// use ecs_trie::Trie;
    /// let mut trie = Trie::new();
    /// trie.insert(&['c', 'a', 't']);
    /// trie.insert(&['c', 'o', 'w']);
    /// 
    /// let found = trie.search(&['c']);
    /// 
    /// assert_eq!(
    ///     found.as_collected().as_slice(),
    ///     &[ ['c', 'a', 't'], ['c', 'o', 'w'] ]
    /// );
    /// ```
    pub fn search(&self, seq_key: &[T]) -> Found<T> {
        let key = key_from_seq(seq_key);

        let mut res = Found::new();
        res.extend(seq_key.iter().cloned());
        if let Some(node) = self.children.get(&key) {
            Trie::_search(&self.children, node, seq_key, 1, &mut res)
        }
        res
    }

    pub fn iter(&self) -> TrieIter<T> {
        TrieIter {
            trie: self,
            current: None,
            starts: &self.starts,
            children: Vec::default(),
            idx: 0,
            next_idx: 0,
        }
    }

    /// Returns `true` if terminal node has children.
    fn is_stem_ish(&self, seq: &[T]) -> bool {
        let end_key = key_from_seq(seq);
        if let Some(node) = self.children.get(&end_key) {
            node.child_len() > 0
        } else {
            false
        }
    }

    /// Returns true if seq contains a terminal node anywhere
    /// except the last node.
    fn contains_terminal(&self, seq: &[T]) -> bool {
        seq.iter().enumerate()
            .any(|(i, _)| {
                // every whole seq will be terminal but we only care about
                // the middle bits.
                if i == seq.len() - 1 { return false };

                let key = key_at_index(i, seq);
                if let Some(n) = self.children.get(&key) {
                    n.is_terminal()
                } else {
                    // TODO what to do if node not found
                    // at this point its a bug becasue we have already
                    // checked if trie contains seq
                    panic!("trie mutated when it shouldn't, bug")
                }
            })
    }

    /// Clears the `Trie`, note this leaves the previously
    /// allocated capacity.
    pub fn clear(&mut self) {
        self.len = 0;
        self.children.clear();
        self.starts.clear();
    }
    /// `key` is child's key `entry` is child's parent node.
    /// True when node has no children after _remove is called.
    fn _remove(seq: &[T], key: u64, entry: Entry<u64, Node<T>>) -> bool {
        let node = entry
            .and_modify(|n| {
                n.remove_child(&key);
            })
            // TODO Hacky?? we can't insert on a remove! we know all `keys` in `seq` are valid
            // so if `or_insert_with` runs we have a bug
            .or_insert_with(|| panic!("tried to remove a non existent child {:?}", seq));
        node.child_len() == 0
    }

    pub fn remove(&mut self, seq: &[T]) -> bool {
        if seq.iter().enumerate()
            .all(|(i, _)| {
                let key = key_at_index(i, seq);
                self.children.contains_key(&key)
            })
        {   
            if self.is_stem_ish(seq) {
                let end_key = key_from_seq(seq);
                if let Some(node) = self.children.get_mut(&end_key) {
                    node.terminal = false;
                }
                return true;
            }
            // since we know the sequence is in the trie if it is as long
            // we can just clear 
            if self.len == seq.len() && !self.contains_terminal(seq) {
                self.clear();
                return true;
            }

            let mut i = seq.len() - 1;
            let mut key = key_at_index(i, seq);
            while i > 0 {
                if Self::_remove(seq, key, self.children.entry(key_at_index(i - 1, seq))) {
                    self.len -= 1;
                    println!("{:?}", self.children.remove(&key));
                } else {
                    println!("{:?}", self.children.remove(&key));
                    self.len -= 1;
                    return true;
                }
                println!("{}", i);
                i -= 1;
                key = key_at_index(i, seq);
            }
            true
        } else {
            false
        }
    }
}

#[derive(Debug, Clone)]
pub struct Found<T> {
    roll_back: Vec<usize>,
    temp: Vec<T>,
    collected: Vec<Vec<T>>,
}
impl<T: Clone + PartialEq> Found<T> {
    fn new() -> Self {
        Self {
            roll_back: vec![],
            temp: vec![],
            collected: vec![],
        }
    }

    pub fn as_collected(&self) -> Vec<&[T]> {
        self.collected
            .iter()
            .map(|seq| seq.as_slice())
            .collect::<Vec<_>>()
    }

    fn extend<I: IntoIterator<Item = T>>(&mut self, i: I) {
        self.temp.extend(i)
    }

    fn push_val(&mut self, t: T) {
        self.temp.push(t);
    }

    fn branch_end_continue(&mut self) {
        self.collected.push(self.temp.clone());
    }

    fn branch_split(&mut self, key: &T) {
        if let Some(idx) = self.temp.iter().position(|item| key == item) {
            let (start, _end) = self.temp.split_at(idx + 1);
            self.temp = start.to_vec();
        }
    }

    fn branch_end(&mut self) {
        self.collected.push(self.temp.clone());
        // remove last element
        self.temp.pop();
    }
}
#[derive(Debug, Clone)]
pub struct TrieIter<'a, T> {
    trie: &'a Trie<T>,
    current: Option<&'a Node<T>>,
    starts: &'a [u64],
    children: Vec<u64>,
    idx: usize,
    next_idx: usize,
}
impl<'a, T> Iterator for TrieIter<'a, T> 
where
    T: Clone + Eq + Hash + Debug,
{
    type Item = &'a Node<T>;
    fn next(&mut self) -> Option<Self::Item> {
        println!("{:#?}", self);
        if self.current.is_none() {
            // this bails us out of the iteration
            let key = self.starts.get(self.idx)?;
            self.current = Some(self.trie.children.get(&key)?);
            self.idx += 1;
            // we know its there
            self.children = self.current.unwrap()
                .walk(self.trie)
                .map(|n| n.key)
                .collect::<Vec<_>>();

            self.current
        } else {
            let key = self.children[self.next_idx];
            self.current = self.trie.children.get(&key);
            self.next_idx += 1;

            if self.next_idx >= self.children.len() {
                self.next_idx = 0;
                let curr = self.current.take();
                curr
            } else {
                self.current
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::fs::File;
    use std::io::Read;

    const DATA: &[&str] = &["data/1984.txt", "data/sun-rising.txt"];

    fn get_text(i: usize) -> Vec<String> {
        let mut contents = String::new();
        File::open(&DATA[i])
            .unwrap()
            .read_to_string(&mut contents)
            .unwrap();
        contents
            .split_whitespace()
            .map(|s| s.trim().to_string())
            .collect()
    }

    fn make_trie(words: &[String]) -> Trie<char> {
        let mut trie = Trie::new();
        for w in words {
            trie.insert(&w.chars().collect::<Vec<_>>());
        }
        trie
    }

    #[test]
    fn insert_find() {
        let cmp_found = vec![ vec!['c', 'a', 't'], vec!['c', 'a', 'r', 't'], vec!['c', 'o', 'w']];
        let mut trie = Trie::new();
        trie.insert(&['c', 'a', 't']);
        trie.insert(&['c', 'a', 'r', 't']);
        trie.insert(&['c', 'o', 'w']);
        let found = trie.search(&['c']);
        println!("{:?}", found);
        for (expected, found) in cmp_found.iter().zip(found.as_collected()) {
            assert_eq!(&expected[..], found)
        }
    }

    #[test]
    fn trie_iter() {
        let ord = &['c', 'a', 't', 'o', 'w'];

        let mut trie = Trie::new();
        trie.insert(&['c', 'a', 't']);
        trie.insert(&['c', 'o', 'w']);

        for (i, n) in trie.iter().enumerate() {
            assert_eq!(ord[i], n.val)
        }
    }

    #[test]
    fn trie_remove() {
        let ord = &['c', 'a', 't', 'o', 'w'];

        let mut trie = Trie::new();
        trie.insert(&['c', 'a', 't']);
        trie.insert(&['c', 'a', 'r', 't']);
        trie.insert(&['c', 'o', 'w']);

        trie.remove(&['c', 'a', 'r', 't']);
        for (i, n) in trie.iter().enumerate() {
            assert_eq!(ord[i], n.val)
        }
        trie.remove(&['c', 'o', 'w']);
        trie.remove(&['c', 'a', 't']);
        assert!(trie.is_empty());
    }
    #[test]
    fn trie_more_remove() {
        let ord = &['c', 'a', 'r', 't'];

        let mut trie = Trie::new();
        trie.insert(&['c', 'a', 'r']);
        trie.insert(&['c', 'a', 'r', 't']);

        trie.remove(&['c', 'a', 'r']);
        for (i, n) in trie.iter().enumerate() {
            assert_eq!(ord[i], n.val)
        }
    }

    #[test]
    fn test_on_data() {
        // test sun rising
        let text = get_text(1);
        let trie = make_trie(&text);

        for word in text.iter() {
            assert!(trie.contains(&word.chars().collect::<Vec<_>>()));
        }

        // test 1984
        let text = get_text(0);
        let trie = make_trie(&text);

        for word in text.iter() {
            assert!(trie.contains(&word.chars().collect::<Vec<_>>()));
        }
    }
}
